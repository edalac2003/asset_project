@page "/maintenance/my-requests"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (listMaintenance is null)
{
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-md-12">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-light" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <AuthorizeView Roles="Administrador, Coordinador, Solicitante, Asistente, Tecnico, Gerente">
        <Authorized>
            <div class="card" style="background:none; border:none;">
                <div class="card-body">
                    <div class="container">
                        <div class="row">
                            <h4 class="card-title">Registro Solicitudes de Mantenimiento </h4>
                            <div class="col-md-2 pt-2">
                                <label class="form-label">Solicitante</label>
                            </div>
                            <div class="col">
                                <input class="form-control" value="@context.User.Identity!.Name" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card" style="background:none; border:none;">
                <div class="card-header" style="background:none; border:none;">
                    <span>
                        <a class="btn btn-md btn-primary float-end mr-3" href="/maintenance/create"><i class="oi oi-plus"></i> Crear Solicitud</a>
                    </span>
                </div>
                <div class="card-body">
                    <GenericList MyList="listMaintenance">
                        <Body>
                            <div class="col-lg-12 grid-margin">
                                <div>
                                    <div class="py-0">
                                        <div class="">
                                            <div class="table-responsive">
                                                <table class="table table-sm">
                                                    <thead>
                                                        <tr>
                                                            <th style="width:15%" class="form-label-title">Fecha registro</th>
                                                            <th style="width:15%" class="form-label-title">Num. Solicitud</th>
                                                            <th style="width:15%" class="form-label-title">Código Activo</th>
                                                            <th style="width:30%" class="form-label-title">Activo Fijo</th>
                                                            <th style="width:15%" class="form-label-title">Estado</th>
                                                            <th style="width:10%" class="form-label-title">Acciones</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @if (listMaintenance != null)
                                                        {
                                                            @foreach (var maintenance in listMaintenance!)
                                                            {
                                                                <tr>
                                                                    <td><small>@maintenance.RegisterDate</small> </td>
                                                                    <td><small>@maintenance.RequestNumber</small></td>
                                                                    <td><small>@maintenance.Asset!.Code</small></td>
                                                                    <td><small>@maintenance.Asset!.AssetType?.Name</small></td>
                                                                    <td><small>@maintenance.StatusType?.Name</small></td>
                                                                    <td>
                                                                        <button class="btn btn-light" @onclick=@(() => viewDetail(maintenance.Id))>Detalle</button>
                                                                    </td>
                                                                </tr>
                                                            }
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </Body>
                    </GenericList>
                </div>
            </div>
            
            <div class="container-fluid" ml-3 mr-3>
                <div class="row">
                    <div class="col-md-12">
                        <Pagination CurrentPage="currentPage" SelectedPage="SelectedPage" TotalPages="totalPages"></Pagination>
                    </div>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
}


@code {
    private List<MaintenanceRequest>? listMaintenance = null!;
    private string userName = string.Empty;

    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;
        var claims = authenticationState.User.Claims.ToList();
        userName = authenticationState.User.Identity!.Name;
        await LoadTotalPagesAsync();
        await LoadMaintenanceRequest();
    }

    private async Task LoadMaintenanceRequest(int page = 1)
    {
        var responseHttp = await repository.GetAsync<List<MaintenanceRequest>>($"/api/MaintenanceRequest/GetAsync?page={page}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        listMaintenance = responseHttp.Response!;
    }

    private void viewDetail(int id)
    {
        navigationManager.NavigateTo($"/maintenance/edit/{id}");
    }

    private async Task LoadTotalPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = "api/MaintenanceRequest/GetPages";
        }
        else
        {
            url = $"api/MaintenanceRequest/GetPages?filter={Filter}";
        }

        var responseHppt = await repository.GetAsync<int>(url);
        totalPages = responseHppt.Response!;
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadMaintenanceRequest(page);
    }

}

@page "/maintenance/create"
@attribute [Authorize(Roles = "Administrador, Coordinador, Solicitante, Asistente, Tecnico, Gerente")]

@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService


<EditForm Model="maintenanceRequestDTO" OnValidSubmit="CreateMaintenanceRequestAsync">
    <DataAnnotationsValidator />
    <div class="col-lg-12 grid-margin">
        <div class="container">
            <div class="row">
                <h4 class="card-title">Registro Solicitudes de Mantenimiento </h4>
                <div class="col-lg-12">
                    <div class="form-group">
                        <div class="row mt-2">
                            <div class="col-md-6">
                                <label class="form-label">Fecha</label>
                                <InputDate class="form-control" @bind-Value="@maintenanceRequestDTO.RegisterDate" />
                                <ValidationMessage For="@(() => maintenanceRequestDTO.RegisterDate)" />
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <label class="form-label">Solicitante</label>
                                <InputText class="form-control" @bind-Value="@maintenanceRequestDTO.UserName" />
                                <ValidationMessage For="@(() => maintenanceRequestDTO.UserName)" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Activo fijo</label>
                                <select class="form-control" @onchange="AssetChangedAsync">
                                    <option value="0">-- Seleccione un Activo fijo --</option>
                                    @if (responseInitialLoad is not null)
                                    {
                                        @foreach (var activo in responseInitialLoad!.assets!)
                                        {
                                            <option value=@activo.Id>@activo.Code</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => maintenanceRequestDTO.AssetId)" />
                            </div>
                        </div>
                        <div class="my-2"></div>
                        @if (selectedAsset > 0)
                        {
                            <AssetDetails Asset="assetDetailResponse"></AssetDetails>
                        }

                        <div class="mb-3"></div>
                        <div class="row mt-3">
                            <div class="col-lg-12">
                                <label class="form-label">Justificación</label>
                                <div style="width:100%">
                                    <InputText class="form-control" @bind-Value="@maintenanceRequestDTO.Justification" />
                                    <ValidationMessage For="@(() => maintenanceRequestDTO.Justification)" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                        </div>

                        <div class="row my-3">
                            <div>
                                <button class="btn btn-danger" @onclick="Return">Cancelar</button>
                                <button class="btn btn-success" >Guardar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private AssetResponseDTO? responseInitialLoad;
    private Asset? assetDetailResponse;
    private int selectedAsset = 0;
    public string userName = string.Empty;

    private MaintenanceRequestDTO maintenanceRequestDTO { get; set; } = new()
        {
            RegisterDate = DateTime.Now
        };

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;


    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;
        var claims = authenticationState.User.Claims.ToList();
        userName = authenticationState.User.Identity!.Name!;
        maintenanceRequestDTO.UserName = userName;
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        string url = $"/api/Assets/GetAssetsByUser?userName={userName}&userId={userName}";
        var httpResponse = await repository.GetAsync<AssetResponseDTO>(url);
        responseInitialLoad = httpResponse.Response;
    }

    private async Task AssetChangedAsync(ChangeEventArgs e)
    {
        selectedAsset = Convert.ToInt32(e.Value!);
        assetDetailResponse = await LoadAssetDetailAsyn(selectedAsset);
    }

    private async Task<Asset> LoadAssetDetailAsyn(int assetId)
    {
        var responseHttp = await repository.GetAsync<Asset>($"/getAssetDetails/{assetId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            return null!;
        }

        return responseHttp.Response!;
    }

    private async Task CreateMaintenanceRequestAsync()
    {
        //Validar si existe una solicitud para el activo fijo en estado Registrada
        var validateStatus = await repository.GetAsync<bool>($"/api/MaintenanceRequest/ExistsRequestByAsset?assetId={selectedAsset}");
        if (validateStatus.Response)
        {
            await sweetAlertService.FireAsync("Error", "Ya existe una solicitud en curso para este Activo Fijo. <br>Por favor seleccione otro e intentelo nuevamente", SweetAlertIcon.Error);
            return;
        }
        else
        {
            maintenanceRequestDTO.AssetId = selectedAsset;
            maintenanceRequestDTO.UserName = userName;
            var responseHttp = await repository.PostAsync<MaintenanceRequestDTO>("/api/MaintenanceRequest", maintenanceRequestDTO);
            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                return;
            }

            navigationManager.NavigateTo($"/maintenance/my-requests");
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.TopEnd,
                    ShowConfirmButton = false,
                    Timer = 5000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Solicitud creada exitosamente.");
        }

    }

    private void Return() => navigationManager.NavigateTo($"/maintenance/my-requests");
}

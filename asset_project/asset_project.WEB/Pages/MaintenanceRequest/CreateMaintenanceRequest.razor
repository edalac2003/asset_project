@page "/maintenance/create"

@inject NavigationManager navigationManager
using SweetAlertService sweetAlertService
@inject IRepository repository

<div class="col-lg-12 grid-margin">
    <div class="card col-lg-12 mx-auto">
        <div class="card-body px-5 py-2">
            <h4 class="card-title">Registro Solicitudes de Mantenimiento </h4>
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="row mt-2">
                                <div class="col-md-6">
                                    <label>Fecha</label>
                                    <input type="date" class="form-control" @bind-value="MaintenanceRequest.RegisterDate" />
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <label>Solicitante</label>
                                    <input class="form-control" />
                                </div>
                                <div class="col-md-6">
                                    <label>Activo fijo</label>
                                    <select class="form-control" @onchange="AssetChangedAsync">
                                        <option value="0">-- Seleccione un Activo fijo --</option>
                                        @if (responseInitialLoad is not null)
                                        {
                                            @foreach (var activo in responseInitialLoad!.assets!)
                                            {
                                                <option value=@activo.Id>@activo.Code</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="my-2"></div>
                            @if (selectedAsset > 0)
                            {
                                <AssetDetails Asset="assetDetailResponse"></AssetDetails>
                            }

                            <div class="mb-3"></div>
                            <div class="row mt-3">
                                <div class="col-lg-12">
                                    <label>Justificación</label>
                                    <div style="width:100%">
                                        <input type="text" class="form-control" multiple @bind-value="MaintenanceRequest.Justification" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                </div>

                <div class="row my-3">
                    <div>
                        <button class="btn btn-outline-danger" @onclick="Return">Cancelar</button>
                        <button class="btn btn-outline-success" @onclick="CreateMaintenanceRequestAsync">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private DateTime DateNow = DateTime.Now;
    private AssetResponseDTO? responseInitialLoad;
    private Asset? assetDetailResponse;
    private int selectedAsset = 0;

    private MaintenanceRequest MaintenanceRequest = new MaintenanceRequest()
        {
            RegisterDate = DateTime.Now
        };

    @* Estas dos variable simulan el comportamiento del usuario legueado
       Se debe ajustar el momelo para que la relación con usuario sea un string,
       porque así lo guarda SQL Server
    *@
    private string userName = "admin@yopmail.com";
    private string userId = "1";

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        string url = $"/api/Assets/GetAssetsByUser?userName={userName}&userId={userId}";
        var httpResponse = await repository.GetAsync<AssetResponseDTO>(url);
        responseInitialLoad = httpResponse.Response;
    }

    private async Task AssetChangedAsync(ChangeEventArgs e)
    {
        selectedAsset = Convert.ToInt32(e.Value!);
        assetDetailResponse = await LoadAssetDetailAsyn(selectedAsset);
    }

    private async Task<Asset> LoadAssetDetailAsyn(int assetId)
    {
        var responseHttp = await repository.GetAsync<Asset>($"/getAssetDetails/{assetId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            //await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return null!;
        }

        return responseHttp.Response!;
    }

    private async Task CreateMaintenanceRequestAsync()
    {
        MaintenanceRequest.AssetId = selectedAsset;
        MaintenanceRequest.UserName = userName;
        string url = "/api/MaintenanceRequest";
        var responseHttp = await repository.PostAsync<MaintenanceRequest>(url, MaintenanceRequest);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            //await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        navigationManager.NavigateTo($"/");
        //var toast = sweetAlertService.Mixin(new SweetAlertOptions
        //    {
        //        Toast = true,
        //        Position = SweetAlertPosition.TopEnd,
        //        ShowConfirmButton = false,
        //        Timer = 5000
        //    });
        //await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Solicitud creada con éxito.");
    }

    private void Return() => navigationManager.NavigateTo($"/");
}
